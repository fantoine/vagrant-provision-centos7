# -*- mode: ruby -*-
# vi: set ft=ruby :

#################################
# General project settings
#################################

    # IP Address for the host only network, change it to anything you like
    # but please keep it within the IPv4 private network range
    ip_address = '192.168.10.20'

    # The project name is base for directories, hostname and alike
    project_name = 'vagrant'

    # Server configuration
    server_extension = 'local'
    server_name      = project_name
    server_aliases   = [ 'www' ]

    # Provision configuration
    provision_config = '/vagrant/vagrant/config.sh'

#################################
# Vagrant configuration
#################################

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Current OS
IS_WINDOWS = /mswin|windows|mingw|cygwin/i === RbConfig::CONFIG['host_os']

# Require the reboot plugin.
require './vagrant/plugins/vagrant-provision-reboot-plugin'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    # All Vagrant configuration is done here. The most common configuration
    # options are documented and commented below. For a complete reference,
    # please see the online documentation at vagrantup.com.

    # Every Vagrant virtual environment requires a box to build off of.
    config.vm.box = 'bento/centos-6.7'

    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # config.vm.box_check_update = false

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # config.vm.network "forwarded_port", guest: 80, host: 8080

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    config.vm.network "private_network", ip: ip_address
    config.vm.hostname = server_name + "." + server_extension
    config.hostsupdater.aliases = server_aliases.map {|a| a + "." + server_name + "." + server_extension}

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"

    # If true, then any SSH connections made will enable agent forwarding.
    # Default value: false
    config.ssh.forward_agent = true
    config.ssh.private_key_path = "./vagrant/ssh/id_rsa"

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    if IS_WINDOWS
        config.vm.synced_folder "./", "/vagrant", disabled: true
    else
        config.vm.synced_folder "./", "/vagrant", nfs: true
    end

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    config.vm.provider "virtualbox" do |vb|
        # Change VirtualBox box name
        vb.name = project_name

        # Use VBoxManage to customize the VM. For example to change memory:
        vb.customize ["modifyvm", :id, "--memory", "2048", "--cpus", "2"]
    end

    # Provisionning
    config.vm.provision :shell do |s|
        s.path = "./vagrant/setup.sh"
        s.args = [provision_config, "server"]
    end
    config.vm.provision :reboot
    config.vm.provision :shell do |s|
        s.path = "./vagrant/setup.sh"
        s.args = [provision_config, "install", server_name + "." + server_extension, server_aliases.join(" ")]
    end
end
